//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Stack.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TechStack : DbContext
    {
        public TechStack()
            : base("name=TechStack")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Article> Articles { get; set; }
        public virtual DbSet<Attachment> Attachments { get; set; }
        public virtual DbSet<Comment> Comments { get; set; }
        public virtual DbSet<ForgotPassword> ForgotPasswords { get; set; }
        public virtual DbSet<Master_Roles> Master_Roles { get; set; }
        public virtual DbSet<MenuItem> MenuItems { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<ProjectFile> ProjectFiles { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        [DbFunction("TechStack", "Split")]
        public virtual IQueryable<Split_Result> Split(string inputString, string delimiter)
        {
            var inputStringParameter = inputString != null ?
                new ObjectParameter("InputString", inputString) :
                new ObjectParameter("InputString", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[TechStack].[Split](@InputString, @Delimiter)", inputStringParameter, delimiterParameter);
        }
    
        public virtual int Generate_UpdateScriptWithPK(string table_Name, string primary_Key)
        {
            var table_NameParameter = table_Name != null ?
                new ObjectParameter("Table_Name", table_Name) :
                new ObjectParameter("Table_Name", typeof(string));
    
            var primary_KeyParameter = primary_Key != null ?
                new ObjectParameter("Primary_Key", primary_Key) :
                new ObjectParameter("Primary_Key", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Generate_UpdateScriptWithPK", table_NameParameter, primary_KeyParameter);
        }
    
        public virtual ObjectResult<GET_MenuItems_Result> GET_MenuItems(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_MenuItems_Result>("GET_MenuItems", categoryIDParameter);
        }
    
        public virtual ObjectResult<Get_QuestionsOnMenuId_Result> Get_QuestionsOnMenuId(Nullable<int> menuItemId)
        {
            var menuItemIdParameter = menuItemId.HasValue ?
                new ObjectParameter("MenuItemId", menuItemId) :
                new ObjectParameter("MenuItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_QuestionsOnMenuId_Result>("Get_QuestionsOnMenuId", menuItemIdParameter);
        }
    
        public virtual int InsertGenerator(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGenerator", tableNameParameter);
        }
    
        public virtual int ResetPassword(Nullable<int> userId, string password)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetPassword", userIdParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Update_Attachments(ObjectParameter attachmentId, Nullable<int> pkId, string attachmentCategory, string attachmentKey, string fileName, byte[] attachment, Nullable<int> contactID)
        {
            var pkIdParameter = pkId.HasValue ?
                new ObjectParameter("PkId", pkId) :
                new ObjectParameter("PkId", typeof(int));
    
            var attachmentCategoryParameter = attachmentCategory != null ?
                new ObjectParameter("AttachmentCategory", attachmentCategory) :
                new ObjectParameter("AttachmentCategory", typeof(string));
    
            var attachmentKeyParameter = attachmentKey != null ?
                new ObjectParameter("AttachmentKey", attachmentKey) :
                new ObjectParameter("AttachmentKey", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var attachmentParameter = attachment != null ?
                new ObjectParameter("Attachment", attachment) :
                new ObjectParameter("Attachment", typeof(byte[]));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("contactID", contactID) :
                new ObjectParameter("contactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Update_Attachments", attachmentId, pkIdParameter, attachmentCategoryParameter, attachmentKeyParameter, fileNameParameter, attachmentParameter, contactIDParameter);
        }
    }
}
